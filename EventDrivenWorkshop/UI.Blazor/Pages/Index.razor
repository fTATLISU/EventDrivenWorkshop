@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using System.Text
@using EDCommon
@using EDCommon.Model;
@implements IDisposable
@inject IJSRuntime jsRuntime

<h1>NEW CHECKOUT!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<button class="btn btn-primary" @onclick="OnClickedButtonCheckout">CHECKOUT</button>
<br>
<br>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<p>Current count: @currentCount</p>

<h1>@orderStatus</h1>



@code
{
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput = "userInputData";
    private string messageInput = "messageInputData";
    private int currentCount = 0;
    private string orderStatus = "";

    protected override async Task OnInitializedAsync()
    {

    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        //_ = hubConnection.DisposeAsync();
    }

    private async Task OnClickedButtonCheckout()
    {
        var connectionId = await ConnectToSignalR();

        using HttpClient client = new HttpClient();
        OrderRequest request = new OrderRequest
        {
            Id = "123",
            LocationCode = "Locati",
            ConnectionId = connectionId
        };
        var json = JsonConvert.SerializeObject(request);
        var httpContent = new StringContent(json, Encoding.UTF8, CustomKey.JSON_CONTENT_TYPE);
        await client.PostAsync("http://bff/api/checkout", httpContent);
        orderStatus = "Processing Order";
    }

    private async Task<string> ConnectToSignalR()
    {
        hubConnection = new HubConnectionBuilder()
           .WithUrl("http://bff/orderHub")
           .Build();

        hubConnection.On<string, string>(CustomKey.SIGNALR_CHECKOUT_METHOD_NAME, async (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
            orderStatus = "Order completed!";
        });

        await hubConnection.StartAsync();
        var connectionId = hubConnection.ConnectionId;
        return connectionId;
    }


    private void IncrementCount()
    {
        currentCount++;
    }
}